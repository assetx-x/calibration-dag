Flow {
    DataPull = [
        "S3SecurityMasterReader"
        "S3IndustryMappingReader"
        "S3EconTransformationReader"
        "YahooDailyPriceReader"
        #"DownloadEconomicData"
        "TimelinePermutator"
        "S3RussellComponentReader"
        #"DummyMergedData"
        "S3RawQuandlDataReader"
        "SQLMinuteToDailyEquityPrices"
        "CalibrationDatesJump"
        "S3GANUniverseReader"
    ]
    EconData = [
        "DownloadEconomicData"
    ]
    FundamentalCleanup = [
        "QuandlDataCleanup"
    ]
    Targets = [
        "CalculateTargetReturns"
    ]
    DerivedFundamentalDataProcessing = [
        "CalculateDerivedQuandlFeatures"
    ]
    DerivedTechnicalDataProcessing = [
        "CalculateTaLibSTOCHRSIMultiParam"
        "CalculateVolatilityMultiParam"
        "CalculateTaLibWILLRMultiParam"
        "CalculateTaLibPPOMultiParam"
        "CalculateTaLibADXMultiParam"
    ]
    DerivedSimplePriceFeatureProcessing = [
        "ComputeBetaQuantamental"
        "CalculateMACD"
        "CalcualteCorrelation"
        "CalculateDollarVolume"
        "CalculateOvernightReturn"
        "CalculatePastReturnEquity"
        "CalculateTaLibSTOCH"
        "CalculateTaLibSTOCHF"
        "CalculateTaLibTRIX"
        "CalculateTaLibULTOSC"
    ]
    MergeStep = [
        "QuantamentalMerge"
    ]
    FilterDatesSingleNames = [
        "FilterMonthlyDatesFullPopulation"
        "CreateMonthlyDataSingleNames"
    ]
    Transformation = [
        "CreateYahooDailyPriceRolling"
        "TransformEconomicData"
        "CreateIndustryAverage"
    ]
    MergeEcon = [
        "QuantamentalMergeEconIndustry"
    ]
    Standarization = [
        "FactorStandardizationFullPopulation"
        #"AddFoldIdToNormalziedData"
    ]
    ActiveMatrix = [
        "GenerateActiveMatrix"
    ]
    AdditionalGANFeatures = [
        "GenerateBMEReturns"
    ]
    SaveGANInputs = [
        "GenerateDataGAN"
    ]
    GANTraining = [
        "TrainGANModel"
    ]
    GenerateGANResults = [
        "ExtractGANFactors"
    ]
    MergeGANResults = [
        "ConsolidateGANResults"
        "AddFoldIdToGANResultData"
    ]
    IntermediateModelTraining = [
        "TrainIntermediateModels"
    ]
    MergeSignal = [
        "QuantamentalMergeSignals"
    ]
    PopulationSplit = [
        "FilterRussell1000Augmented"
    ]
    Residualization = [
        "FactorNeutralizationForStacking"
    ]
    ResidualizedStandardization = [
        "FactorStandardizationNeutralizedForStacking"
    ]
    AddFinalFoldId = [
        "AddFoldIdToNormalziedDataGrowthValuePortfolio"
    ]
    FinalModelTraining = [
        "RollingModelEstimation"
    ]
    GenerateTraderInstructions = [
        "ConvertSignalsToInstructionFile"
    ]
    UploadInstructions = [
        "DepositInstructionsS3"
    ]
}
FlowConfiguration {
    snapshot_location = "/calibration_data/snapshots/gan_2019-12-26-first-month"
    #snapshot_location = "C:/DCM/temp/pipeline_tests/gan_20191226_last"
    base_configuration_filepath = "../configuration/market_view_calibration_pipeline.conf"
    base_configuration_overrides {}
    use_existing_cache_for_stages = [*]
    calibration_mode_overrides {
        }

        test_mode_overrides {
            FlowConfiguration {
                snapshot_location = "./test/test_run_cache"
            }
            StepsConfiguration {

                }
        }

}
StepsConfiguration{
    S3SecurityMasterReader{
            bucket = "dcm-data-temp"
            key =  "jack/security_master_final.csv"
        }
        S3IndustryMappingReader {
        bucket = "dcm-data-temp"
        key = "jack/industry_map.csv"
        }
        S3EconTransformationReader {
            sector_etfs = ["SPY", "MDY", "EWG", "EWH", "EWJ", "EWW", "EWS", "EWU"]
            bucket = "dcm-data-temp"
            key = "jack/econ_transform_definitions.csv"
        }
        YahooDailyPriceReader{
            sector_etfs = ["SPY", "MDY", "EWG", "EWH", "EWJ", "EWW", "EWS", "EWU"]
            start_date = "1997-01-01"
            end_date = "2019-12-26" 
        }
        DownloadEconomicData{
            start_date = "1997-01-01"
            sector_etfs = ["SPY", "MDY", "EWG", "EWH", "EWJ", "EWW", "EWS", "EWU"]
            use_latest = False
        }
        TimelinePermutator {
            permutation_enabled = False
            timeline_segmenter_function_names = null 
            random_seed = 12345
            permute_day_at_lowest_segment = True
    }
    S3RussellComponentReader {
            bucket = "dcm-data-temp"
            r3k_key = "jack/r3k.csv" 
            r1k_key = "jack/r1k.csv"
    }
    #DummyMergedData{
        #file_name_location = "C:/DCM/temp/pipeline_tests/gan_update_201910_sn/DerivedSimplePriceFeatureProcessing.h5"
            #key = "/pandas/merged_data"
    #}
    S3RawQuandlDataReader {
        bucket = "dcm-data-temp"
        key = "jack/SHARADAR_SF1.csv"
    }
    SQLMinuteToDailyEquityPrices {
    }
    CalibrationDatesJump {
        cache_file: "../configuration/intervals_for_jump_short.csv"
        target_dt: "2019-12-26"
        intervals_start_dt: "2000-01-03" #"1997-01-02"
        intervals_end_dt: "2019-12-26"
        holding_period_in_trading_days: 1
        force_recalculation: True
        save_intervals_to: null
    }
    S3GANUniverseReader {
        bucket = "dcm-data-temp"
        key = "jack/current_gan_training_universe.csv"
    }
    QuandlDataCleanup {
    }
    CalculateTargetReturns {
        return_column = close
        periods = [1, 5, 10, 21, 42]
        winsorize_alpha = 0.005
    }
    CalculateDerivedQuandlFeatures {
    }
    CalculateTaLibPPOMultiParam {
        configs = [
        {
            technical_indicator_params: {fastperiod: 3, slowperiod: 14, matype: 0}
            price_column: close
            invert_sign: True
        },
        {
            technical_indicator_params: {fastperiod: 12, slowperiod: 26, matype: 0}
            price_column: close
            invert_sign: True
        },
        {
            technical_indicator_params: {fastperiod: 21, slowperiod: 126, matype: 0}
            price_column: close
            invert_sign: True
        }
        ]
    }
    CalculateTaLibADXMultiParam {
        configs = [
        {
            technical_indicator: talib.ADX 
            technical_indicator_params: {timeperiod: 5}
            smoothing_period: 3
        },
        {
            technical_indicator: talib.ADX 
            technical_indicator_params: {timeperiod: 14}
            smoothing_period: 3
        },
        {
            technical_indicator: talib.ADX 
            technical_indicator_params: {timeperiod: 63}
            smoothing_period: 3
        }
        ]
    }
    CalculateTaLibWILLRMultiParam {
        configs = [
        {
            technical_indicator_params: {timeperiod: 5} 
            smoothing_period: 3
        },
        {
            technical_indicator_params: {timeperiod: 14} 
            smoothing_period: 3
        },
        {
            technical_indicator_params: {timeperiod: 63} 
            smoothing_period: 3
        }
        ]
    }
    CalculateVolatilityMultiParam {
        configs = [
        {
                volatility_lookback = 21
                price_column = close
        },
        {
                volatility_lookback = 63
                price_column = close
        },
        {
                volatility_lookback = 126
                price_column = close
        },
        ]
    }
    CalculateTaLibSTOCHRSIMultiParam {
        configs = [
        {
            technical_indicator_params: {timeperiod: 14, fastk_period: 5, fastd_period: 3, fastd_matype: 0}
            price_column: close
        },        
        {
            technical_indicator_params: {timeperiod: 30, fastk_period: 10, fastd_period: 5, fastd_matype: 0}
            price_column: close
        },
        {
            technical_indicator_params: {timeperiod: 63, fastk_period: 15, fastd_period: 10, fastd_matype: 0}
            price_column: close
        },
        ]
    }
    CalculateMACD: {
        technical_indicator = macd,
            technical_indicator_params = {nslow:26, nfast:12},
            smoothing_period = 3,
            price_column = close
    }
    CalcualteCorrelation {
        benchmark_names = [8554]
            correlation_lookback = 126
            price_column = open
    }
    CalculateDollarVolume {
        lookback_periods = 21
    }
    CalculateOvernightReturn {}
    CalculatePastReturnEquity {
        column : close
        lookback_list : [1, 2, 5, 10, 21, 63, 126, 252]
    }
    CalculateTaLibSTOCH {
        technical_indicator_params = {fastk_period: 5, slowk_period: 3, slowk_matype: 0, slowd_period: 3, slowd_matype: 0}
    }
    CalculateTaLibSTOCHF {
        technical_indicator_params: {fastk_period: 5, fastd_period: 3, fastd_matype: 0}
    }
    CalculateTaLibTRIX {
        technical_indicator_params: {timeperiod: 30}
        price_column: close
    }
    CalculateTaLibULTOSC {
        technical_indicator_params: {timeperiod1: 7, timeperiod2: 14, timeperiod3: 28}
        smoothing_period: 3
    }
    ComputeBetaQuantamental: {
        benchmark_names = [8554]
        beta_lookback = 63
        offset_unit = B
        price_column = close
        dropna_pctg = 0.15
        use_robust = False
        epsilon = 1.35
        alpha = 0.0001
        fit_intercept = False
    }
    QuantamentalMerge {
        apply_log_vol = True
        start_date = "2000-03-15"  #"1997-12-31"
        end_date = "2019-12-26"
    }
    FilterMonthlyDatesFullPopulation{
        mode = "bme"
        start_date = "2000-03-15"
        end_date = "2019-12-26" 
    }
    CreateMonthlyDataSingleNames{
    }
    CreateYahooDailyPriceRolling{
        rolling_interval = 5
    }
    TransformEconomicData {
        mode = "bme"
        start_date = "1997-06-30"
        end_date = "2019-12-26" 
        shift_increment = "month" # For GAN try day instead of month
    }
    CreateIndustryAverage{
        industry_cols = ["volatility_126", "PPO_12_26", "PPO_21_126", "netmargin", "macd_diff", "pe", "debt2equity", "bm", "ret_63B", "ebitda_to_ev", "divyield"]
        sector_cols = ["volatility_126", "PPO_21_126", "macd_diff", "divyield", "bm"]
    }
    QuantamentalMergeEconIndustry{
        industry_cols = ["volatility_126", "PPO_12_26", "PPO_21_126", "netmargin", "macd_diff", "pe", "debt2equity", "bm", "ret_63B", "ebitda_to_ev", "divyield"]
        security_master_cols = ["dcm_security_id", "Sector", "IndustryGroup"]
        sector_cols = ["volatility_126", "PPO_21_126", "macd_diff", "divyield", "bm"]
        key_sectors = ["Energy", "Information Technology", "Financials", "Utilities", "Consumer Discretionary", "Industrials", "Consumer Staples"],
        econ_cols = ["RETAILx", "USTRADE", "SPY_close", "bm_Financials", "T10YFFM", "T5YFFM", "CPITRNSL", "OILPRICEx", "EWJ_volume", "HWI", "CUSR0000SA0L2", "CUSR0000SA0L5", "T1YFFM", "DNDGRG3M086SBEA", "AAAFFM", "RPI", "macd_diff_ConsumerStaples", "EXUSUKx", "COMPAPFFx", "PPO_21_126_Industrials", "PPO_21_126_Financials", "CP3Mx", "divyield_ConsumerStaples", "VXOCLSx", "GS10", "bm_Utilities", "EWG_close", "CUSR0000SAC", "GS5", "divyield_Industrials", "WPSID62", "IPDCONGD", "PPO_21_126_InformationTechnology", "PPO_21_126_Energy", "PPO_21_126_ConsumerDiscretionary"]
        start_date = "1997-12-15"
        end_date = "2019-12-26"
        normalize_econ = False
    }
    FactorStandardizationFullPopulation {
        all_features = True
        exclude_from_standardization = ["fq", "divyield_Industrials", "PPO_21_126_ConsumerDiscretionary", "DNDGRG3M086SBEA", "EXUSUKx", "GS10", "IPDCONGD", "T5YFFM", 
                                        "USTRADE", "CUSR0000SA0L2", "RETAILx", "bm_Financials", "OILPRICEx", "T10YFFM", "CPITRNSL", "CP3Mx", "CUSR0000SAC", "EWJ_volume", 
                                        "SPY_close", "VXOCLSx", "PPO_21_126_InformationTechnology", "WPSID62", "GS5", "COMPAPFFx", "CUSR0000SA0L5", "T1YFFM", "PPO_21_126_Energy", 
                                        "bm_Utilities", "PPO_21_126_Financials", "HWI", "RPI", "PPO_21_126_Industrials", "divyield_ConsumerStaples", "EWG_close", "macd_diff_ConsumerStaples", 
                                        "AAAFFM", "fold_id", "Sector", "IndustryGroup"]
        target_columns= ["future_asset_growth_qoq", "future_ret_10B", "future_ret_1B", "future_ret_21B", "future_ret_42B", "future_ret_5B", "future_revenue_growth_qoq"]
        suffixes_to_exclude = ["_std"]
    }
    #AddFoldIdToNormalziedData {
        #cut_dates = ["2003-12-31", "2007-09-28", "2011-06-30", "2014-12-31", "2017-11-30"]
    #}
    GenerateActiveMatrix {
        start_date = "2000-01-01"
        end_date = "2019-12-26"
        ref_col = ret_5B
    }
    GenerateBMEReturns {
    }
    GenerateDataGAN {
        data_dir = "/calibration_data/gan_training_data_2019-12-26-first-month"
    }
    TrainGANModel {
        python_bin = "/home/ec2-user/anaconda2/envs/bigdataml/bin/python"
        util_script_location = "/home/ec2-user/dcm-intuition/processes/data_processing/calibrations/quantamental_ml/gan_py3/gan_util_functions.py"
        data_dir = "/calibration_data/gan_training_data_2019-12-26-first-month"
        insample_cut_date = "2017-12-29"
        epochs = 150
        epochs_discriminator = 50
        gan_iterations = 2
        retrain = True
    }
    ExtractGANFactors {
        python_bin = "/home/ec2-user/anaconda2/envs/bigdataml/bin/python"
        util_script_location = "/home/ec2-user/dcm-intuition/processes/data_processing/calibrations/quantamental_ml/gan_py3/gan_util_functions.py"
        data_dir = "/calibration_data/gan_training_data_2019-12-26-first-month"
        insample_cut_date = "2017-12-29"
    }
    ConsolidateGANResults {
    }
    AddFoldIdToGANResultData {
        cut_dates = ["2003-12-31", "2007-09-28", "2011-06-30", "2014-12-31", "2017-11-30"]
    }
    TrainIntermediateModels {
        y_col = "future_return_RF_100_std"
        X_cols = ["EWG_close", "HWI", "IPDCONGD", "EXUSUKx", "COMPAPFFx", "GS5", "CUSR0000SAC", "T5YFFM", "PPO_21_126_InformationTechnology", "macd_diff_ConsumerStaples", "PPO_21_126_Industrials", "VXOCLSx", "PPO_21_126_Energy", "T1YFFM", "WPSID62", "CUSR0000SA0L2", "EWJ_volume", "PPO_21_126_ConsumerDiscretionary", "OILPRICEx", "GS10", "RPI", "CPITRNSL", "divyield_ConsumerStaples", "bm_Financials", "USTRADE", "T10YFFM", "divyield_Industrials", "AAAFFM", "RETAILx", "bm_Utilities", "SPY_close", "log_mktcap", "volatility_126", "momentum", "bm", "PPO_12_26", "SPY_beta", "log_dollar_volume", "fcf_yield"]
        return_col = "future_ret_21B"
        ensemble_weights = {"enet": 0.03333333333333333, "et": 0.3, "gbm": 0.2, "lasso": 0.03333333333333333, "ols": 0.03333333333333333, "rf": 0.4}
        load_from_s3 = False
        bucket = "dcm-data-temp"
        key_base = "saved_econ_models"
        local_save_dir = "./econ_models_gan_2019-12-26-first-month"
    }
    QuantamentalMergeSignals {
        drop_column = "future_ret_21B"
    }
    FilterRussell1000Augmented {
        start_date = "2009-03-15"
        end_date = "2019-12-26"
    }
    FactorNeutralizationForStacking {
        factors = ["SPY_beta", "log_mktcap", "ret_5B", "ret_21B", "volatility_63", "volatility_126", "momentum"]
        exclusion_list = ["fq", "divyield_Industrials", "PPO_21_126_ConsumerDiscretionary", "DNDGRG3M086SBEA", "EXUSUKx",
                          "GS10", "IPDCONGD", "T5YFFM", "USTRADE", "CUSR0000SA0L2", "RETAILx", "bm_Financials", "OILPRICEx",
                          "T10YFFM", "CPITRNSL", "CP3Mx", "CUSR0000SAC", "EWJ_volume", "SPY_close", "VXOCLSx",
                          "PPO_21_126_InformationTechnology",  "WPSID62", "GS5", "COMPAPFFx", "CUSR0000SA0L5",
                          "T1YFFM", "PPO_21_126_Energy", "bm_Utilities", "PPO_21_126_Financials", "HWI", "RPI",
                          "PPO_21_126_Industrials",  "divyield_ConsumerStaples", "EWG_close", "macd_diff_ConsumerStaples",
                          "AAAFFM", "ols", "lasso", "enet", "et", "rf", "gbm", "ensemble"]
    }
    FactorStandardizationNeutralizedForStacking {
        all_features = True
        exclude_from_standardization = ["fq", "divyield_Industrials", "PPO_21_126_ConsumerDiscretionary", "DNDGRG3M086SBEA", "EXUSUKx", "GS10", "IPDCONGD", "T5YFFM", 
                                        "USTRADE", "CUSR0000SA0L2", "RETAILx", "bm_Financials", "OILPRICEx", "T10YFFM", "CPITRNSL", "CP3Mx", "CUSR0000SAC", "EWJ_volume", 
                                        "SPY_close", "VXOCLSx", "PPO_21_126_InformationTechnology", "WPSID62", "GS5", "COMPAPFFx", "CUSR0000SA0L5", "T1YFFM", "PPO_21_126_Energy", 
                                        "bm_Utilities", "PPO_21_126_Financials", "HWI", "RPI", "PPO_21_126_Industrials", "divyield_ConsumerStaples", "EWG_close", "macd_diff_ConsumerStaples", 
                                        "AAAFFM", "fold_id", "Sector", "IndustryGroup"]
        target_columns= ["future_asset_growth_qoq", "future_ret_10B", "future_ret_1B", "future_ret_21B", "future_ret_42B", "future_ret_5B", "future_revenue_growth_qoq"]
        suffixes_to_exclude = ["_std"]
    }
    AddFoldIdToNormalziedDataGrowthValuePortfolio {
        cut_dates = ["2010-12-31", "2012-09-28", "2014-06-30", "2016-03-31", "2017-12-29"]
    }
    RollingModelEstimation {
        date_combinations = [[2017, 12], [2018, 3], [2018, 6], [2018, 9], [2018, 12], [2019, 3], [2019, 6], [2019, 9]]
        ensemble_weights = {"enet": 0.03333333333333333, "et": 0.3, "gbm": 0.2, "lasso": 0.03333333333333333, "ols": 0.03333333333333333, "rf": 0.4}
        load_from_s3 = False
        bucket = "dcm-data-temp"
        key_base = "saved_rolling_models"
        local_save_dir = "./rolling_models_gan_2019-12-26-first-month"
        value_model_code = 1
        growth_model_code = 2
    }
    ConvertSignalsToInstructionFile {
        number_of_quantiles = 5,
        actorID = "Quantamental_Trader",
        rebalancing_frequency = "BMS",
        rebalancing_time = "09:31:00"
    }
    DepositInstructionsS3 {
        bucket = "dcm-data-temp"
        key_base = "jack/monthly_instruction_files_gan_first_month"
    }
}