import math
import numpy as np
import pandas as pd
from scipy.interpolate import interp1d

class MDD_Q_FUNC(object):
    def __init__(self):
        """
        Initializing tabulated data for Qn and Qp calculation.
        Source: http://alumnus.caltech.edu/~amir/drawdown-jrnl.pdf, pg. 23
        """
        self.gamma = 0.6266570686577501 # (math.pi/8.)**.5
        self.X_n = [ 5.00000000e-04,   1.00000000e-03,   1.50000000e-03,
                     2.00000000e-03,   2.50000000e-03,   5.00000000e-03,
                     7.50000000e-03,   1.00000000e-02,   1.25000000e-02,
                     1.50000000e-02,   1.75000000e-02,   2.00000000e-02,
                     2.25000000e-02,   2.50000000e-02,   2.75000000e-02,
                     3.00000000e-02,   3.25000000e-02,   3.50000000e-02,
                     3.75000000e-02,   4.00000000e-02,   4.25000000e-02,
                     4.50000000e-02,   4.75000000e-02,   5.00000000e-02,
                     5.50000000e-02,   6.00000000e-02,   6.50000000e-02,
                     7.00000000e-02,   7.50000000e-02,   8.00000000e-02,
                     8.50000000e-02,   9.00000000e-02,   9.50000000e-02,
                     1.00000000e-01,   1.50000000e-01,   2.00000000e-01,
                     2.50000000e-01,   3.00000000e-01,   3.50000000e-01,
                     4.00000000e-01,   4.50000000e-01,   5.00000000e-01,
                     7.50000000e-01,   1.00000000e+00,   1.25000000e+00,
                     1.50000000e+00,   1.75000000e+00,   2.00000000e+00,
                     2.25000000e+00,   2.50000000e+00,   2.75000000e+00,
                     3.00000000e+00,   3.25000000e+00,   3.50000000e+00,
                     3.75000000e+00,   4.00000000e+00,   4.25000000e+00,
                     4.50000000e+00,   4.75000000e+00,   5.00000000e+00]

        self.Q_n = [ 0.019965,  0.028394,  0.034874,  0.040369,  0.045256,  0.064633,
                     0.079746,  0.092708,  0.104259,  0.114814,  0.124608,  0.133772,
                     0.142429,  0.150739,  0.158565,  0.166229,  0.173756,  0.180793,
                     0.187739,  0.194489,  0.201094,  0.207572,  0.213877,  0.220056,
                     0.231797,  0.243374,  0.254585,  0.265472,  0.27607 ,  0.286406,
                     0.296507,  0.306393,  0.316066,  0.325586,  0.413136,  0.491599,
                     0.564333,  0.633007,  0.698849,  0.762455,  0.824484,  0.884593,
                     1.17202 ,  1.44552 ,  1.70936 ,  1.97074 ,  2.22742 ,  2.48396 ,
                     2.73676 ,  2.99094 ,  3.24354 ,  3.49252 ,  3.74294 ,  3.99519 ,
                     4.24274 ,  4.49238 ,  4.73859 ,  4.99043 ,  5.24083 ,  5.49882 ]

        self.X_p = [ 5.00000000e-04,   1.00000000e-03,   1.50000000e-03,
                     2.00000000e-03,   2.50000000e-03,   5.00000000e-03,
                     7.50000000e-03,   1.00000000e-02,   1.25000000e-02,
                     1.50000000e-02,   1.75000000e-02,   2.00000000e-02,
                     2.25000000e-02,   2.50000000e-02,   2.75000000e-02,
                     3.00000000e-02,   3.25000000e-02,   3.50000000e-02,
                     3.75000000e-02,   4.00000000e-02,   4.25000000e-02,
                     4.50000000e-02,   4.75000000e-02,   5.00000000e-02,
                     5.50000000e-02,   6.00000000e-02,   6.50000000e-02,
                     7.00000000e-02,   7.50000000e-02,   8.00000000e-02,
                     8.50000000e-02,   9.00000000e-02,   9.50000000e-02,
                     1.00000000e-01,   1.50000000e-01,   2.00000000e-01,
                     2.50000000e-01,   3.00000000e-01,   3.50000000e-01,
                     4.00000000e-01,   4.50000000e-01,   5.00000000e-01,
                     1.00000000e+00,   1.50000000e+00,   2.00000000e+00,
                     2.50000000e+00,   3.00000000e+00,   3.50000000e+00,
                     4.00000000e+00,   4.50000000e+00,   5.00000000e+00,
                     1.00000000e+01,   1.50000000e+01,   2.00000000e+01,
                     2.50000000e+01,   3.00000000e+01,   3.50000000e+01,
                     4.00000000e+01,   4.50000000e+01,   5.00000000e+01,
                     1.00000000e+02,   1.50000000e+02,   2.00000000e+02,
                     2.50000000e+02,   3.00000000e+02,   3.50000000e+02,
                     4.00000000e+02,   4.50000000e+02,   5.00000000e+02,
                     1.00000000e+03,   1.50000000e+03,   2.00000000e+03,
                     2.50000000e+03,   3.00000000e+03,   3.50000000e+03,
                     4.00000000e+03,   4.50000000e+03,   5.00000000e+03]

        self.Q_p = [ 0.01969 ,  0.027694,  0.033789,  0.038896,  0.043372,  0.060721,
                     0.073808,  0.084693,  0.094171,  0.102651,  0.110375,  0.117503,
                     0.124142,  0.130374,  0.136259,  0.141842,  0.147162,  0.152249,
                     0.157127,  0.161817,  0.166337,  0.170702,  0.174924,  0.179015,
                     0.186842,  0.194248,  0.201287,  0.207999,  0.214421,  0.220581,
                     0.226505,  0.232212,  0.237722,  0.24305 ,  0.288719,  0.325071,
                     0.355581,  0.382016,  0.405415,  0.426452,  0.445588,  0.463159,
                     0.588642,  0.668992,  0.72854 ,  0.775976,  0.815456,  0.849298,
                     0.878933,  0.905305,  0.92907 ,  1.088998,  1.184918,  1.253794,
                     1.307607,  1.351794,  1.389289,  1.42186 ,  1.450654,  1.476457,
                     1.647113,  1.747485,  1.818873,  1.874323,  1.919671,  1.958037,
                     1.991288,  2.02063 ,  2.046885,  2.219765,  2.320983,  2.392826,
                     2.448562,  2.494109,  2.532622,  2.565985,  2.595416,  2.621743]

        self.f_n = interp1d(self.X_n, self.Q_n, fill_value='extrapolate')
        self.f_p = interp1d(self.X_p, self.Q_p, fill_value='extrapolate')

    def get_qn(self, X_new):
        left_limit, right_limit = self.f_n.x[0], self.f_n.x[-1]
        if X_new < left_limit:
            #gamma = (math.pi / 8) ** 0.5
            left_asymptotic = lambda x: self.gamma * (2 * x) ** 0.5 # Qn_asymptotic left side
            Q_result = left_asymptotic(X_new)
        elif X_new > right_limit:
            right_asymptotic = lambda x: x + 0.5  # Qn_asymptotic right side
            Q_result = right_asymptotic(X_new)
        else:
            Q_result = self.f_n(X_new) # interpolation
        return Q_result

    def get_qp(self, X_new):
        left_limit, right_limit = self.f_p.x[0], self.f_p.x[-1]
        if X_new < left_limit:
            #gamma = (math.pi / 8) ** 0.5
            left_asymptotic = lambda x: self.gamma * (2 * x) ** 0.5 # Qp_asymptotic left side
            Q_result = left_asymptotic(X_new)
        elif X_new > right_limit:
            right_asymptotic = lambda x: 0.25 * math.log(x) + 0.49088  # Qp_asymptotic right side
            Q_result = right_asymptotic(X_new)
        else:
            Q_result = self.f_p(X_new) # interpolation
        return Q_result

    def get_EMDD(self, mean, vol, n_periods, x):
        if mean > 0:
            qp = self.get_qp(x)
            EMDD = -2 * (vol ** 2) * qp / mean
        elif mean < 0:
            qn = self.get_qn(x)
            EMDD = 2 * (vol**2) * qn / mean
        else:
            EMDD = -pd.np.sqrt(math.pi/2) * vol * pd.np.sqrt(n_periods)
        return np.min([np.max([EMDD, -1.0]), 1.0])

if __name__=="__main__":

    MDD_ = MDD_Q_FUNC()

    ret = 0.1004 # annualized return
    vol = 0.1548 # annualized volatility
    T   = 24.25  # number of periods (years)
    MDD = 0.4628 # MAX DrawDown

    sharpe = ret / vol
    calmar = ret * T / MDD
    x      = T/2 * (sharpe**2)
    EMDD = MDD_.get_EMDD(ret, vol, T, x)

    print("calmar = {0}\n"
          "sharpe = {1}\n"
          "x      = {2}\n"
          "EMDD   = {3}".format(calmar, sharpe, x, EMDD))

    ret = 0.249 # annualized return
    vol = 0.061# annualized volatility
    T   = 4  # number of periods (years)
    MDD = 0.05 # MAX DrawDown

    sharpe = ret / vol
    calmar = ret * T / MDD
    x      = T/2 * (sharpe**2)
    EMDD = MDD_.get_EMDD(ret, vol, T, x)

    print("calmar = {0}\n"
          "sharpe = {1}\n"
          "x      = {2}\n"
          "EMDD   = {3}".format(calmar, sharpe, x, EMDD))