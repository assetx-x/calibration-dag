gcp {
    region = us
    region = ${?GOOGLE_REGION}
    project_id = ${GOOGLE_PROJECT_ID}
}
credentials: {
    s3 {
        access_key = ${?AWS_ACCESS_KEY_ID}
        secret_key = ${?AWS_SECRET_ACCESS_KEY}
    }

    redshift {
        host = marketdata-test.cq0v4ljf3cuw.us-east-1.redshift.amazonaws.com
        username = ${?REDSHIFT_USER}
        password = ${?REDSHIFT_PWD}
        database = dev
        port = 5439
        s3_temp_dir = dcm-data-temp
    }
	snowflake {
	  user = ${?SNOWFLAKE_USER}
	  password = ${?SNOWFLAKE_PWD}
	  account = "sb29751.us-east-1"
	  database = "dcm_main"
	  schema = public
	  warehouse = DEV_WH
	  role = researcher
	  db_url = "snowflake://"${credentials.snowflake.user}":"${credentials.snowflake.password}"@"${credentials.snowflake.account}"/"${credentials.snowflake.database}"/"${credentials.snowflake.schema}"?warehouse="${credentials.snowflake.warehouse}"?role="${credentials.snowflake.role}
	}
}
calibration_mode: {
    start_dt_offset: 330B
}

ParallelQueryRedshiftDownload {
  s3_default_location = "gs://"${gcp.project_id}"-"${gcp.region}"-dcm-data-temp/data-pipelines"
  credentials {
    s3 {
      access_key = ${?AWS_ACCESS_KEY_ID}
      secret_key = ${?AWS_SECRET_ACCESS_KEY}
    }
    redshift {
        host = marketdata-test.cq0v4ljf3cuw.us-east-1.redshift.amazonaws.com
        username = ${?REDSHIFT_USER}
        password = ${?REDSHIFT_PWD}
        database = dev
        port = 5439
    }
  }
}
SQLReader: {
        persistent_data_caching = True
        force_data_pull = True
        local_cache_base_dir = "/mnt/disk1/temp/pipeline_tests/market_views"
        s3_cache_base_dir = "gs://"${gcp.project_id}"-"${gcp.region}"-dcm-data-temp/napoleon/market_view_data/20170727/"
        s3_calibration_temp_dir = "gs://"${gcp.project_id}"-"${gcp.region}"-dcm-data-temp/calibration/market_views/"
        cleanup_remote_dir = True
        parallel_processes = 20
    }

MomentumMergeAllData: {
}

MomentumDigitization: {
    digitization_description = {
        tech_indicators_per_date: {
            columns = [indicator]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [entry_date]
            suffix = _date
        },
        past_return_per_sector_date: {
            columns = [ret_20B, ret_60B, ret_125B, ret_252B]
            quantiles = [0.0, 0.05, 0.10, 0.20, 0.5, 0.80, 0.90, 0.95, 1.0]
            group_by = [sector, entry_date]
            suffix = _sector_date
        },
        past_return_performance_per_date: {
            columns = [ret_20B, ret_60B, ret_125B, ret_252B]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [entry_date]
            suffix = _date
        }
    }
}


CalculateXIVReturn: {
    lookback_periods = 7
    price_concept = close
}

GetLastAvailablePrice : {
    column : close
}
CalculateFutureReturn: {
    column : open
    lookback_list : [1, 2, 3, 4, 5, 10, 15, 20]
}
CalculateSpecialIndexRatios: {
    price_column: close
}


ViewClassesFormationShortVol: {
  ali_view:
 {
    view_function_params: {
        leverage_ratio: 1.5,
        inverse_contango_weight: 0.7,
        significant_change_threshold: 0.08,
    }
   view_signal_class_name = ViewInMarketVolatilityNew
   wealth_percentage = 0.45
   view_assets: vol_assets
 }
  jack_view:
 {
    view_function_params: {
        leverage_ratio: 1.5,
        inverse_contango_weight: 0.7,
        significant_change_threshold: 0.08,
    }
   view_signal_class_name = ViewInMarketVolatility
   wealth_percentage = 0.45
   view_assets: vol_assets
 }
   bf_view:
 {
    view_function_params: {
        leverage_ratio: 1.5,
        inverse_contango_weight: 0.7,
        significant_change_threshold: 0.08,
    }
   view_signal_class_name = ViewInMarketVolatilityBruteForce
   wealth_percentage = 0.10
   view_assets: vol_assets
 }
}

ViewClassesFormationShortVol: {
  ali_view:
 {
    view_function_params: {
        leverage_ratio: 1.5,
        inverse_contango_weight: 0.7,
        significant_change_threshold: 0.08,
    }
   view_signal_class_name = ViewInMarketVolatilityNew
   wealth_percentage = 0.45
   view_assets: vol_assets
 }
  jack_view:
 {
    view_function_params: {
        leverage_ratio: 1.5,
        inverse_contango_weight: 0.7,
        significant_change_threshold: 0.08,
    }
   view_signal_class_name = ViewInMarketVolatility
   wealth_percentage = 0.45
   view_assets: vol_assets
 }
   bf_view:
 {
    view_function_params: {
        leverage_ratio: 1.5,
        inverse_contango_weight: 0.7,
        significant_change_threshold: 0.08,
    }
   view_signal_class_name = ViewInMarketVolatilityBruteForce
   wealth_percentage = 0.10
   view_assets: vol_assets
 }
}




###### Section exclusively for Basket Pairs Trading Calibration


###############################################################
#
#    Fundamentals Section



CalculateRSI: {
    technical_indicator = rsi,
    technical_indicator_params = {window: 14},
    smoothing_period = 3,
    price_column = close
}

CalculateMA: {
    technical_indicator = ma,
    technical_indicator_params = {window_size: 5},
    price_column = close
}

CalculateTaLibRSI: {
    technical_indicator = rsi,
    technical_indicator_params = {timeperiod: 10},
    smoothing_period = 3,
    price_column = close
}

CalculateTaLibADX: {
    technical_indicator = adx,
    technical_indicator_params = {timeperiod: 14},
    smoothing_period = 3,
}

CalculateFracDiff: {
    technical_indicator = frac_diff,
    technical_indicator_params = {differencing:0.6, threshold:0.001},
    price_column = close
}



FundamentalsDigitization: {
    digitization_description = {
        per_date: {
            columns = [ret_20B, ret_60B, ret_125B, ret_252B, indicator, stoch_k, stoch_d, slow_stoch_d,
                       sentiment_oscilator, sentiment_score, capex_cq, free_cash_flow_yield, cash_return,
                       shareholder_yield, ebitda_to_ev, pe_forward, gross_profit_to_assets, earnings_yield_ltm,
                       grossprofit_margin_ltm, netincome_margin_ltm, free_cash_flow_to_assets, totalasset_turnover_cq,
                       SPY_correl, TLT_correl, GSG_correl, GLD_correl, VWO_correl, avg_dollar_volume]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [entry_date]
            suffix = _date
        },
        per_sector_date: {
            columns = [ret_20B, ret_60B, ret_125B, ret_252B, indicator, stoch_k, stoch_d, slow_stoch_d,
                       sentiment_oscilator, sentiment_score, capex_cq, free_cash_flow_yield, cash_return,
                       shareholder_yield, ebitda_to_ev, pe_forward, gross_profit_to_assets, earnings_yield_ltm,
                       grossprofit_margin_ltm, netincome_margin_ltm, free_cash_flow_to_assets, totalasset_turnover_cq,
                       SPY_correl, TLT_correl, GSG_correl, GLD_correl, VWO_correl, avg_dollar_volume]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [sector, entry_date]
            suffix = _sector_date
        }
    }
}


#########################################################################################

ViewsExperimentMerge = {
    excluded_interval_columns = [VXX_indicator,	acceptable_correlation, average_iv_ts_vxv_vix, iv_ts_vxv_vix,
                                 ivts_medianfiltered_vxv_vix, msg, spot_ivts_vxv_vix, vxmt_close_yesterday,
                                 vxv_close_yesterday]
    return_tickers = [SPY, TLT, VIXM, VIXY, VXX, VXZ, VCIT, GLD, LQD, IEF, IEI, GSG, VWO, SPX, PPUT, CMBO, BFLY, RXM, VIX, VXST, VXMT, VIX3M]
}

###########################################################################################


CalculateDerivedFundamentalsJump = {
    concept_filter = [pe_ratio_damodaran_art, shareholder_yield_art, free_cash_flow_to_assets_art,
                      total_debt_yield_art, share_repurchase_yield_arq,
                      gross_profit_to_assets_art, free_cash_flow_yield_art,
                      total_debt_yield_arq, net_margin_art, fcf_to_tangible_assets_art, pe_ratio_art,
                      fcf_cash_shareholder_yield_zcombined]
}




###############################################
## Test

DigitizationTest: {
    digitization_description = {
        per_date: {
            columns = [ret_20B, indicator, stoch_d, slow_stoch_d, free_cash_flow_to_assets_art,
                       total_debt_yield_art, share_repurchase_yield_arq, net_margin_art, fcf_to_tangible_assets_art,
                       ebitda_to_ev_arq, cash_return_art, revenue_yield_art, debt_issuance_yield_art,
                       net_operating_cash_flow_yield_art, fcf_gpa_zcombined, shareholder_yield_gpa_zcombined,
                       inventory_ratio_arq, gearing_ratio_art, price_to_book_arq, marketcap, dividend_yield_arq,
                       book_value_per_share_art, sentiment_score, overnight_return, entry_price, raw_entry_price,
                       stoch_d_ewma, macd_centerline, macd_diff, ret_252B, ret_60B_diff_ret_125B,
                       asset_turnover_art, ebitda_margin_art, gross_margin_art, payout_ratio_art,
                       tangible_book_value_per_share_arq]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [entry_date]
            suffix = _date
        }
        per_sector_date: {
            columns = [ret_20B, indicator, stoch_d, slow_stoch_d, free_cash_flow_to_assets_art,
                       total_debt_yield_art, share_repurchase_yield_arq, net_margin_art, fcf_to_tangible_assets_art,
                       ebitda_to_ev_arq, cash_return_art, revenue_yield_art, debt_issuance_yield_art,
                       net_operating_cash_flow_yield_art, fcf_gpa_zcombined, shareholder_yield_gpa_zcombined]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [sector, entry_date]
            suffix = _sector_date
        }
    }
}

DigitizationTest_2: {
    digitization_description = {
        per_date: {
            columns = [inventory_ratio_art, ret_60B, stoch_k, stoch_d, slow_stoch_d]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [entry_date]
            suffix = _date
        }
        per_sector_date: {
            columns = [enterprise_value_art]
            quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
            group_by = [sector, entry_date]
            suffix = _sector_date
        }
    }
}
