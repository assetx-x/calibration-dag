Flow {
    DataPull = [
        "TimelinePermutator"
        "SQLReaderPriceData"
        "SQLReaderAdjustmentFactors"
        "SQLReaderFundamentalData"
        "SQLReaderFundamentalDataQuandl"
        "SQLReaderRavenpackMomentumIndicator"
        "SQLReaderRavenpackOvernightVolume"
        "SQLReaderETFInformation"
        "SQLReaderEarningsDates"
        "SQLReaderSectorBenchmarkMap"
        "SQLReaderDailyIndexData"
    ]
    DerivedDataProcessing = [
	"CalibrationDatesJump"
        "CalculateDerivedFundamentalsQuandl"
        "CalculateOvernightReturn"
        "CalculateLeeJumpIndicator"
        "CalculatePerformanceReturnOnIntervals"
        "CalculateRawEntryPriceOnIntervals"
        "CalcualteCorrelation"
        "CalculateTechnicalIndicator"
        "CalculateStochasticIndicator"
        "CalculateDollarVolume"
        "CalcualteQuarterlyReturn"
        "CalculatePastReturn"
        "CalculateFutureReturn"
    ]
    DataConsolidation = [
        "JumpMerge"
        "JumpDigitization"
    ]
}
FlowConfiguration {
    snapshot_location = "C:/DCM/temp/pipeline_tests/jump"
    base_configuration_filepath = "../configuration/market_view_calibration_pipeline.conf"
    base_configuration_overrides {}
    use_existing_cache_for_stages = [*]
    calibration_mode_overrides {}
    test_mode_overrides {
	FlowConfiguration {
	    snapshot_location = "./test/test_run_cache"
	}
	StepsConfiguration {
		CalibrationDatesJump {
			cache_file: "../configuration/intervals_for_jump.csv"
			target_dt: "2018-11-01"
			intervals_start_dt: "2018-09-01"
			intervals_end_dt: "2018-11-30"
			holding_period_in_trading_days: 1
			force_recalculation: True
			save_intervals_to: null
		}
	}
    }
}
StepsConfiguration {
    TimelinePermutator {
		permutation_enabled = False
		timeline_segmenter_function_names = null 
		random_seed = 12345
        permute_day_at_lowest_segment = True
	}
    SQLReaderPriceData {
        table_name = "daily_equity_prices"
		price_limit_filters = {open:[0, 1000000], close:[0, 100000]}
    }
    SQLReaderAdjustmentFactors {
        table_name = "equity_adjustment_factors"
    }
    SQLReaderFundamentalData {
        table_name = "fundamentals_short_digitized"
		date_column = "date"
    }
    SQLReaderFundamentalDataQuandl {
        table_name = "fundamental_data"
		date_column = "as_of_start"
    }
    SQLReaderRavenpackMomentumIndicator {
		ndays_slow = 91
		ndays_fast = 28
	}
    SQLReaderRavenpackOvernightVolume {}
    SQLReaderETFInformation {}
    SQLReaderEarningsDates {}
    SQLReaderSectorBenchmarkMap {}
    SQLReaderDailyIndexData {
        table_name = "daily_index"
		index_names = ["SPX", "PPUT", "CMBO", "BFLY", "RXM", "VIX", "VXST", "VXMT", "VIX3M"]
    }
    CalibrationDatesJump {
	cache_file: "../configuration/intervals_for_jump_short.csv"
	target_dt: "2019-01-04"
	intervals_start_dt: "2018-06-01"
	intervals_end_dt: "2018-12-31"
	holding_period_in_trading_days: 1
	force_recalculation: True
	save_intervals_to: null
    }
    CalculateDerivedFundamentalsQuandl {
        concept_filter: [pe_ratio_damodaran_art, shareholder_yield_art, free_cash_flow_to_assets_art,
			 total_debt_yield_art, share_repurchase_yield_arq,
			 gross_profit_to_assets_art, free_cash_flow_yield_art,
			 total_debt_yield_arq, net_margin_art, fcf_to_tangible_assets_art, pe_ratio_art,
			 fcf_cash_shareholder_yield_zcombined]
    }
    CalculateOvernightReturn {}
	CalculateLeeJumpIndicator = {
		technical_indicator = lee_jump_detection,
		technical_indicator_params = {delta_t=0.003968253968253968, window=70, g=1.2, jump_return_criteria="either", alpha=0.05},
	}
	CalculatePerformanceReturnOnIntervals {
		addtive_tc = 0.01
		slippage_pct = 0.001
	}
    CalculateRawEntryPriceOnIntervals {
        use_previous_close_as_entry = false
    }
    CalcualteCorrelation {
		benchmark_names = ["SPY"]
		correlation_lookback = 63
		price_column = close
    }
	CalculateTechnicalIndicator {
		technical_indicator = price_oscillator,
		technical_indicator_params = {nslow: 26, nfast: 12},
		price_column = close,
		calculate_indicator_ranking =True
	}
	CalculateStochasticIndicator {
		technical_indicator = stoch_k
		technical_indicator_params = {offset: 14}
		smoothing_period = 3
		smoothing_period_2 = 3
		price_column = close
	}
    CalculateDollarVolume {
        lookback_periods = 10
    }
    CalcualteQuarterlyReturn {}
    CalculatePastReturn {
		column : close
		lookback_list : [1, 2, 3, 4, 5, 10, 15, 20]
    }
    CalculateFutureReturn {
		column : open
		lookback_list : [1, 2, 3, 4, 5, 6, 7, 10, 15]
    }
	JumpMerge: {
		ranking_benchmarks = [SPY]
		sector_benchmarks = [XLI, XLV, XLF, XLK, XLY, XLE, VDC, XLB, XLU]
		other_benchmarks = [SPY]
		slippage_pct = 0.001
		addtive_tc = 0.01

	}
	JumpDigitization: {
		digitization_description = {
			per_date: {
				columns = [ret_1B, ret_2B, ret_3B, ret_4B, ret_5B, ret_10B, ret_15B, ret_20B,
						   indicator, stoch_k, stoch_d, slow_stoch_d,
						   q1, q2, q3, q4, sentiment_oscilator, sentiment_score,
						   pe_ratio_damodaran_art, shareholder_yield_art, free_cash_flow_to_assets_art,
						   total_debt_yield_art, share_repurchase_yield_arq,
						   gross_profit_to_assets_art, free_cash_flow_yield_art,
						   total_debt_yield_arq, net_margin_art, fcf_to_tangible_assets_art, pe_ratio_art,
						   fcf_cash_shareholder_yield_zcombined,
						   SPY_correl, overnight_return, overnight_return_over_SPY, overnight_return_over_benchmark]
				quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
				group_by = [entry_date]
				suffix = _date
			},
			per_sector_date_decile: {
				columns = [ret_1B, ret_2B, ret_3B, ret_4B, ret_5B, ret_10B, ret_15B, ret_20B,
						   indicator, stoch_k, stoch_d, slow_stoch_d,
						   q1, q2, q3, q4, sentiment_oscilator, sentiment_score,
						   pe_ratio_damodaran_art, shareholder_yield_art, free_cash_flow_to_assets_art,
						   total_debt_yield_art, share_repurchase_yield_arq,
						   gross_profit_to_assets_art, free_cash_flow_yield_art,
						   total_debt_yield_arq, net_margin_art, fcf_to_tangible_assets_art, pe_ratio_art,
						   fcf_cash_shareholder_yield_zcombined,
						   SPY_correl, overnight_return, overnight_return_over_SPY, overnight_return_over_benchmark]
				quantiles = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
				group_by = [sector, entry_date]
				suffix = _sector_date_decile
			}
		}
	}
}